// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  orgMongoId  String   @unique
  name        String   @unique
  phone       String
  email       String?
  address     String?
  isBloodBank Boolean
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name, orgMongoId])
  @@map("tbl_organizations")
}

model Organizer {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  teamMongoId String   @unique
  name        String
  email       String?
  address     String?
  phone       String
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name, teamMongoId])
  @@map("tbl_organizers")
}

model Event {
  id             Int           @id @default(autoincrement())
  uuid           String        @unique @default(uuid())
  eventMongoId   String        @unique
  name           String
  contactInfo    Json
  location       String
  geoLocation    Json?
  bloodBank      String?
  target         Int?
  volunteers     Volunteer[]
  date           DateTime
  endDate        DateTime?
  startTime      DateTime?
  endTime        DateTime?
  isClosed       Boolean       @default(false)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [uuid])
  organizerId    String?
  organizer      Organizer?    @relation(fields: [organizerId], references: [uuid])
  donations      Donation[]
  donors         Donor[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([name, eventMongoId])
  @@map("tbl_events")
}

model Donor {
  id             Int        @id @default(autoincrement())
  uuid           String     @unique @default(uuid())
  donorMongoId   String     @unique
  name           String
  phone          String     @unique
  email          String?
  dop            DateTime?
  dopNp          DateTime?
  gender         Gender
  bloodInfo      Json
  location       String
  lastDonated    DateTime?
  isActive       Boolean    @default(false)
  source         Json?
  geoLocation    Json
  donation       Donation[]
  donationLegacy DateTime[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Event          Event?     @relation(fields: [eventId], references: [uuid])
  eventId        String?

  @@index([name, donorMongoId])
  @@map("tbl_donors")
}

model Donation {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  bloodBagType BloodBagType? @default(SINGLE)
  bloodBagId   String?
  tubeId       String?
  consentUrl   String?
  rejectReason Json?
  note         String?
  extras       Json?
  custom       String?
  eventId      String?
  donorId      String?
  event        Event?        @relation(fields: [eventId], references: [uuid])
  donor        Donor?        @relation(fields: [donorId], references: [uuid])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("tbl_donations")
}

model Volunteer {
  id      Int     @id @default(autoincrement())
  uuid    String  @unique @default(uuid())
  name    String
  email   String?
  phone   String
  role    String?
  eventId String
  event   Event?  @relation(fields: [eventId], references: [uuid])

  @@map("tbl_volunteers")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  DONT_KNOW
}

enum BloodBagType {
  SINGLE
  DOUBLE
  TRIPLE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}
